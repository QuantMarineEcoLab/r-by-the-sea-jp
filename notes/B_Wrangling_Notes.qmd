---
title: 'Notes B'
subtitle: "Wrangling data with `dplyr`: `filter`, `select`, `arrange`"
author: "EMW" 
date: "Tues, June 4, 2024"
format:
  html:
    toc: true
    code-overflow: wrap
    code-fold: false
    embed-resources: true
execute: 
  message: FALSE
  warning: FALSE
---

# Importing Data

In this workshop, we are going to be working with the `possum` dataset which consists of nine morphometric measurements on each of 104 mountain brushtail possums, trapped at seven Australian sites from Southern Victoria to central Queensland. 

Source: Lindenmayer, D. B., Viggers, K. L., Cunningham, R. B., and Donnelly, C. F. 1995. Morphological variation among columns of the mountain brushtail possum, Trichosurus caninus Ogilby (Phalangeridae: Marsupiala). Australian Journal of Zoology 43: 449-458.

What is a .csv file? 

How do we import it into R?

```{r}
#possum.csv needs to be saved in the same directory as this file. 
#possum <- read.csv("possum.csv")
```

Alternatively, you can download it directly from the `DAAD` package. 

```{r}
#You need to install the DAAG package first. Then you can call it using the code below. 
library(DAAG)
data(possum)
```

Let's take a look at this data for a minute to see what information has been recorded. 

This data frame contains the following columns:

- `case`: observation number
- `site`: one of seven locations where possums were trapped. The sites were, in order,Cambarville, Bellbird, Whian Whian, Byrangery, Conondale, Allyn River and Bulburin
- `Pop`: a factor which classifies the sites as Vic Victoria, other New South Wales or Queensland
- `sex`: a factor with levels f female, m male
- `age`: age
- `hdlngth`: head length, in cm
- `skullw`: skull width, in cm
- `totlngth`: total length, in cm
- `taill`: tail length, in cm
- `footlgth`: foot length, in cm
- `earconch`: ear conch length, in cm
- `eye`: distance from medial canthus to lateral canthus of right eye, in cm
- `chest`chest girth, in cm
- `belly`: belly girth, in cm

# Installing and Using Packages

Sometimes everything we need (data, functions, etc) are not available in base R. In R, expert users will package up useful things like data and functions into packages that be download and used. 

First, you need to download the package from the right hand menu --> 
You only need to do this once. 

In each new .Rmd document, you need to call any packages you want to use  but adding the code `library(packagename)` inside an R chunk. 

For example, in this class we will use the `tidyverse` package a lot. 

```{r}
#| message: FALSE
#| warning: FALSE

library(tidyverse)
```

# `dplyr`

There are actually many commonly used packages wrapped up inside one `tidyverse` package. 

Today we are specifically going to be talking about the package `dplyr` which is useful to manipulating data sets.

# `filter`

We can use the `filter` function to extract ***rows*** from the data that have a particular characteristic. 

For example, we may be interested in only looking at female possums.  

```{r}
#start with the possums dataset, the pipe "%" means apply the action on the following line to the previous line. In this case, pick out only the rows were the sex variable is "f" 

 # %>% == and then do this

possum %>%
  filter(sex == "f")
  
##note the sex is text/categorical and so quotation marks are needed. 
##R doesn't care about whether they are double quotation marks (") or single ('). They work the same. 
# If we don't assign it to an object, then it just prints out for us to see! 
```

```{r}
#oftentimes, we want to take our subset and give it a new name. This takes our subset and assigns it to a new dataset called `possum_f`. 

possum_f <- possum %>%
  filter(sex == "f")

#Notice if you assign it to an object that it doesn't print out the contents. 
# You'll see the new object in your environment on the top right ---> 
# If you click on the word `possum_f` (not the blue play button) it will open the object so you can see what is saved inside. 
```

It can also be used with numeric criteria. 

Suppose we want a list of all the possums whose total length is less than 80cm. 

```{r}
possum %>% 
  filter(totlngth < 80)
```

The logical operators are given below: 

![](https://ehsanx.github.io/intro2R/images/logical.png){width=50%}

# `select`

select is used to extract only certain ***columns***. For example, perhaps we only want to print out a dataset with only the population, the sex, and the total length of each possum. 

```{r}
# %>% 
#MAC (CMD + Shift + M)
#PC (Ctrl + Shift + M)

possum %>% 
  select(Pop, sex, totlngth)
```

We can combine criteria together as well in one command with multiple pipes: 

```{r}
possum %>% 
  filter(sex == "f") %>% 
  filter(totlngth < 80) %>% 
  select(Pop, sex, age, totlngth)
```

# `arrange`

The `arrange` function allows us to order the rows of the data frame by the values of a particular column. 

For example, arrange all the female possums by the longest length to the shortest total length

```{r}
possum_f %>% 
  arrange(-totlngth)

#use arrange(variable) to go from least to most
#use arrange(desc(variable)) to go from most to least, arrange(-variable) also works
```

# `slice`

The slice function will allow us to pick only a subset of the rows based on their numeric order (1st through last). 

For example, if I want a list the 5 female possums with longest total lengths.  

```{r}
possum_f %>% 
  arrange(-totlngth) %>% 
  slice(1:5)
```

