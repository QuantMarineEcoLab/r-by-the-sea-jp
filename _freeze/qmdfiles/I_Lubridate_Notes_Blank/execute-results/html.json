{
  "hash": "25835cec91046c2de5b11115ef658081",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Notes D'\nsubtitle: 'lubridate: Working with dates in R`'\nformat:\n  html:\n    toc: true\n    code-overflow: wrap\n    code-fold: false\n    embed-resources: true\nexecute: \n  message: FALSE\n  warning: FALSE\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES \nlibrary(tidyverse)\nlibrary(lubridate)\n```\n:::\n\n\n# Date Formats\n\nThink of how many different formats you know of to list today's date: \n\n\nYikes! \n\n# Date, Time, and Datetime\n\nDate/time data are data that conveys information about, you guessed it, date and/or time! There are three relevant data types when we talk about date/time data:\n\n1. Date - only has the date (e.g. 2020-05-15) \n2. Time - only has the time (e.g. 20:45:00) \n3. Datetime - has both the date and time (e.g. 2020-05-15 20:45:00)\n\n# Standard Date Format\n\nThe `ymd()` function transforms data in all kinds of different formats into a standardized date format displaying year, then month, then day. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd(\"06 02 04\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2006-02-04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd(\"06/02/04\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2006-02-04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd(\"20060204\")  # works as well\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2006-02-04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd(\"2006 2 4\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2006-02-04\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd(060204)  # works with numbers\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2006-02-04\"\n```\n\n\n:::\n:::\n\n\n`mdy()` (month day year) and `dmy()` (day month year) formats also exist. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2020-04-01 10:30:13\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-04-01 10:30:13 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nymd_hm(\"2020/04/01 10.30\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2020-04-01 10:30:00 UTC\"\n```\n\n\n:::\n:::\n\n\n## Formating Madagascar date_time column\n\nWhy function do you think you would use to format the madagascar data_time column from a character to a POSIXct format? Write it in the markdown doc below (e.g., `ymd_hms`)\n\n\n#Exercise 1\n\n1. Load in the madagascar data set\n\n::: {.cell}\n\n:::\n\n\n2. Make a plot of the water temperature over time. Hint: use `geom_point`in `ggplot2`\n\n::: {.cell}\n\n:::\n\n\n3. Look at the class (e.g, character, number) of each of your columns. What is the class of the date_time column?\n\n::: {.cell}\n\n:::\n\n\n4. Change the date_time column to a POSIXct format. Check to see if the column was changed and graph the temperature over time again. \n\n::: {.cell}\n\n:::\n\n\n\n\n# Changing time zones\n\nTo get a list of the available time zones, we can use `OlsonNames()`\n\nTo check time zones, we can use `tz`. Check the timezone of the date_time column. What is the time zone?\n\n::: {.cell}\n\n:::\n\n\nLet's change the time zone to Africa/Nairobi. \nWe can use `mutate` to add a new column or overwrite a column\n`with_tz` returns a date-time as it would appear in a different time zone. Change the time zone. After doing so, check the time zone. \n\n::: {.cell}\n\n:::\n\n\n\n# Making Dates From Values\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#make_date\n\n#make_datetime\n```\n:::\n\n\n\n# Portal Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD DATA\n#Recall the Portal Dataset\nportal_rodent <- read.csv(\"https://github.com/weecology/PortalData/raw/main/Rodents/Portal_rodent.csv\")\n```\n:::\n\n\nUnfortunately, because the information about datetime is divided up into different columns, R does not recognize it as date/time data. What we need to do is combine and convert all of these columns into datetime. To do this, we can use the function `make_datetime()`\n\n\n::: {.cell}\n\n:::\n\n\n# Rounding Times\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt <- ymd_hms(\"2022-11-15 00:08:30\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Round\nround_date(t, unit = \"second\") #no change\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 00:08:30 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nround_date(t, unit = \"minute\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 00:09:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nround_date(t, unit = \"hour\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nround_date(t, unit = \"day\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 UTC\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Force Round UP\nceiling_date(t, unit = \"minute\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 00:09:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nceiling_date(t, unit = \"hour\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 01:00:00 UTC\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Force Round DOWN\nfloor_date(t, unit = \"minute\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 00:08:00 UTC\"\n```\n\n\n:::\n\n```{.r .cell-code}\nfloor_date(t, unit = \"hour\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2022-11-15 UTC\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}