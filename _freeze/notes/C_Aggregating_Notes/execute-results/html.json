{
  "hash": "3d3a41fe450b5dc5f1924234acf54cc9",
  "result": {
    "markdown": "---\ntitle: 'Notes C'\nsubtitle: 'Aggregating data with `summarize()`, `group_by()`'\nformat:\n  html:\n    toc: true\n    code-overflow: wrap\n    code-fold: false\n    embed-resources: true\nexecute: \n  message: FALSE\n  warning: FALSE\n---\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES \nlibrary(tidyverse)\n```\n:::\n\n\n# Today's Dataset: `palmerpenguins`\n\nSize measurements, clutch observations, and blood isotope ratios for adult foraging Adélie, Chinstrap, and Gentoo penguins observed on islands in the Palmer Archipelago near Palmer Station, Antarctica. Data were collected and made available by Dr. Kristen Gorman and the Palmer Station Long Term Ecological Research (LTER) Program.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD DATA \nlibrary(palmerpenguins)\ndata(penguins)\n```\n:::\n\n\n\n# Clean up the data to remove rows with missing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins <- penguins %>%\n  drop_na()\n#sometimes this is appropriate...\n#need to think about why data is missing... \n```\n:::\n\n\n# `summarize` Function or `summarise` Function (either works)\n\nSuppose we are interested in the average bill length of all Adelie penguins: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(species == \"Adelie\") %>%\n  summarize(average_bill_lenth = mean(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  average_bill_lenth\n               <dbl>\n1               38.8\n```\n:::\n:::\n\n\nSuppose we are interested in the average bill length AND average bill depth of all Adelie penguins: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(species == \"Adelie\") %>%\n  summarize(average_bill_lenth = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  average_bill_lenth average_bill_depth\n               <dbl>              <dbl>\n1               38.8               18.3\n```\n:::\n:::\n\nThere are lots of other functions available: \n\n- `min`: minimum value\n- `max`: maximum value\n- `mean`: average or mean value\n- `median`: median value\n- `var`: variance \n- `sd`: standard deviation \n- `n`: count or number of values\n- `n_distinct`: counts number of distinct values\n\nSuppose we are interested in the average bill length AND the median bill length of all Adelie penguins: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  filter(species == \"Adelie\") %>%\n  summarise(average_bill_lenth = mean(bill_length_mm), \n            median_bill_length = median(bill_length_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  average_bill_lenth median_bill_length\n               <dbl>              <dbl>\n1               38.8               38.8\n```\n:::\n:::\n\n\n# `group_by`\n\nLet's say we were interested in the average bill length and bill depth of all penguin species in this dataset. We could repeat this for the other species (Gentoo and Chinstrap). This would be a fair amount of work AND the results would not end up in the same table. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  group_by(species) %>%\n  summarise(average_bill_lenth = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  species   average_bill_lenth average_bill_depth\n  <fct>                  <dbl>              <dbl>\n1 Adelie                  38.8               18.3\n2 Chinstrap               48.8               18.4\n3 Gentoo                  47.6               15.0\n```\n:::\n:::\n\n\n## Multiple Groups\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  group_by(species, sex) %>%\n  summarise(average_bill_lenth = mean(bill_length_mm), \n            average_bill_depth = mean(bill_depth_mm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 4\n# Groups:   species [3]\n  species   sex    average_bill_lenth average_bill_depth\n  <fct>     <fct>               <dbl>              <dbl>\n1 Adelie    female               37.3               17.6\n2 Adelie    male                 40.4               19.1\n3 Chinstrap female               46.6               17.6\n4 Chinstrap male                 51.1               19.3\n5 Gentoo    female               45.6               14.2\n6 Gentoo    male                 49.5               15.7\n```\n:::\n:::\n\n\n# More Practice\nSuppose we want to calculate the number of distinct islands each species is found on:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>%\n  group_by(species) %>%\n  summarise(number_islands = n_distinct(island))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  species   number_islands\n  <fct>              <int>\n1 Adelie                 3\n2 Chinstrap              1\n3 Gentoo                 1\n```\n:::\n:::\n\n\nSuppose we are interested in how many penguins of each species are on each island in the year 2007: \n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins %>% \n  filter(year == \"2007\") %>%\n  group_by(species, island) %>%\n  summarise(number_penguins = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n# Groups:   species [3]\n  species   island    number_penguins\n  <fct>     <fct>               <int>\n1 Adelie    Biscoe                 10\n2 Adelie    Dream                  19\n3 Adelie    Torgersen              15\n4 Chinstrap Dream                  26\n5 Gentoo    Biscoe                 33\n```\n:::\n:::\n\n\n\n# Brain Break\n\nThis is a story about Jinjing the South American Magellanic Penguin, that swims 5,000 miles each year to be reunited with the man who saved his life. The rescued Penguin was saved by João Pereira de Souza, a 73 year old part-time fisherman, who lives in an island village just outside Rio de Janeiro, Brazil.\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/oks2R4LqWtE?si=-oIE1Y5OKtNJu26J\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" referrerpolicy=\"strict-origin-when-cross-origin\" allowfullscreen></iframe>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}