{
  "hash": "30879e00aad10f3f92c95831cd618af6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'STAT 118: Notes K'\nsubtitle: 'Maps with `maps` and `sf`'\nauthor: 'Andrew Villeneuve'\ninstitute: 'University of New Hampshire'\nformat:\n  html: \n    toc: TRUE\n    code-overflow: wrap\n    embed-resources: true\n---\n\n\n\n\n### Before we get started, some context:\n\n- `R` is ***fantastic*** for spatial analysis (not covered in this class... look for classes related to spatial statistics)\n- `R` is *great* for interactive data visualization (via `leaflet` or `shiny`... more on this on Thursday)\n- `R` is *okay* at spacial data visualization (creating maps).\n  - There are many different packages in `R` for creating maps. I've found that different packages perform best for different maps. We will talk about a few different ones today. \n  -  If you have a highly map-centric project, there is nothing wrong with working in ArcGIS or QGIS if you find the mapping tools in R insufficient. There are many recent improvements with new packages (like `sp`, `rgdal` and `rgeos`) which profiles much of the functionality of GIS packages! Exciting! (not very beginner friendly - requires familiarity with GIS concepts)\n\n# Using the `maps` package\n\nPerhaps the simplest approach to drawing maps is to use `geom_polygon()` to draw boundaries for different regions.\n\nThe `maps` package contains several built in maps: world (for all countries in the world), france, italy, nz, usa, state (usa state boundaries), and county (usa counties). The maps package isn’t particularly accurate or up-to-date, but it’s built into R so it’s an easy place to start.\n\nTo reference each map you use `map_data(\"mapname\")`. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES\nlibrary(tidyverse)\nlibrary(maps)\n#You may need to install the \"devtools\" package. This is because jpmap is hosted on Github rather than another server like CRAN. \n#If you are prompted to update packages, you can hit <ENTER> to skip - if there is a required update, you will see a message\n# install.packages(\"devtools\")\ndevtools::install_github(\"UchidaMizuki/jpmap\")\nlibrary(jpmap)\n\n#LOAD DATA\nworld_map <- map_data(\"world\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#World Map\nggplot(world_map, aes(long, lat, group=group)) + \n  geom_polygon() +\n  coord_quickmap()\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nNote:\n\n- `coord_quickmap()` adjusts the axes to ensure that longitude and latitude are rendered on the same scale. It is very important that this aspect ratio is maintained or a country may appear super stretched or super squished.\n- the `aes(group=group)` option -- This is SUPER IMPORTANT, so R knows which things to connect together\n\n## What about subsetting the data? \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Subset to get Japan\njapan <- map_data(\"world\", region =\"Japan\")\n\n#Subset to get USA\nusa <- map_data(\"world\", region =\"USA\")\n```\n:::\n\n\n\n\n\n## What if aspect ratio is not maintained? \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ASPECT RATIO NOT MAINTAINED.\nggplot(japan, aes(long, lat)) + \n  geom_polygon(aes(group=group)) + \n  theme_light() +\n  ggtitle(\"Japan - Aspect Ratio Not Maintained (not good)\")\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# ASPECT RATIO MAINTAINED\nggplot(japan, aes(long, lat)) + \n  geom_polygon(aes(group=group)) + \n  coord_quickmap()  +\n  theme_light() +\n  ggtitle(\"Japan - Aspect Ratio Maintained (better)\")\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Japan with Prefectures\n\nWe will now plot Japan using ggplot, using the japan object we created from the map_data package. Note that this is when the format of japan is as a data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Plot of Japan \njapan%>%\n  ggplot(aes(x=long,y=lat))+\n  geom_polygon(aes(group=group)) +\n  coord_quickmap()\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n\n\n## How to customize colors? \n\nYou can use either numeric codes, or the name of a color, when you specify the palette of your map. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#you can use numeric or character names https://r-charts.com/colors/\nggplot(japan, aes(long, lat)) +\ngeom_polygon(aes(group=group), fill =\"#FFFFF0\", color =\"#000000\") +\ncoord_quickmap() +\ntheme_light()\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(japan, aes(long, lat)) +\ngeom_polygon(aes(group=group), fill =\"ivory\", color =\"black\") +\ncoord_quickmap() +\ntheme_light()\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n# Using the `sf` package\n\nThere are a few limitations to the approach outlined above, not least of which is the fact that the simple \"longitude-latitude\" data format is not typically used in real world mapping. Vector data for maps are typically encoded using the \"simple features\" standard produced by the Open Geospatial Consortium. The `sf` package developed by Edzer Pebesma provides an excellent toolset for working with such data, and the `geom_sf()` and `coord_sf()` functions in ggplot2 are designed to work together with the `sf` package.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#LOAD PACKAGES\n#install.packages(\"sf\") - note some students are getting a pop-up when they install the sf package for the first time. Select the \"no\" option when it pops up in your console. \nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nLinking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n#some students are needing into install the rgeos package seperately as well\n#library(rgeos)\n\n#load japan prefecture map from the jpmap package\nprefecture<-jpmap::prefecture\n\n#we need to do a little cleanup on prefecture names - make them all lower case\nprefecture$pref_name<-tolower(prefecture$pref_name)\n#and now make them all ASCII (non-accented) characters\nprefecture$pref_name<-iconv(prefecture$pref_name, from = 'UTF-8', to = 'ASCII//TRANSLIT')\n```\n:::\n\n\n\n\n\nFor our first example, we will create a prefecture map of Japan. Note that we need less code, because geom_sf knows how to plot sf objects without you having to tell R what to use for X/Y axes. Note that you also do not need coord_quickmap.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=prefecture)+\n  geom_sf(fill=\"ivory\",color=\"black\")+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\nWe can even just plot a single prefecture of interest by filtering our sf object!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmiyagi<-prefecture%>%\n  filter(pref_name==\"miyagi\")\n\nggplot(miyagi)+\n  geom_sf(fill=\"ivory\",color=\"black\")+\n  theme_light()\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\nFor our second example, we will be working with a dataset of Japanese census data tfrom the `choroplethr` package.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"choroplethr\")\nlibrary(choroplethr)\n#load the japan census data from the choroplethr package\ndata(df_japan_census)\n\n#Let's take a peak at the census data\nstr(df_japan_census)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t47 obs. of  4 variables:\n $ region                      : chr  \"aichi\" \"akita\" \"aomori\" \"chiba\" ...\n $ pop_2010                    : num  7411000 1086000 1373000 6216000 1431000 ...\n $ percent_pop_change_2005_2010: num  2.2 -5.2 -4.4 2.6 -2.5 -1.9 0.4 -3 -1.3 -0.8 ...\n $ pop_density_km2_2010        : num  1434.8 93.3 142.4 1205.5 252.1 ...\n```\n\n\n:::\n\n```{.r .cell-code}\n#rename the prefecture. We need to do this in order to merge with the prefecture sf dataframe\ndf_japan_census<-df_japan_census%>%\n  rename(\"pref_name\"=\"region\")\n\n#Now, we can merge the census data with the prefecture sf map.\nmerged_prefs<-merge(prefecture,df_japan_census,by=\"pref_name\")\n```\n:::\n\n\n\n\nYou should notice that the `merged_prefs` dataset is now saved in your R environment. This dataset contains information about total population of each prefecture in 2010, the precent population change from 2005-2010, and population density per $km^2$ in 2010. Let’s take a look at that dataset.\n\nEach row represents a prefecture in Japan This data frame contains the following columns:\n\n- `pref_name` Name of each prefecture (without capitalization or accent characters)\n- `pref_code` Numeric code that is unique to each prefecture\n- `pref_name_ja` Name of each prefecture in Japanese\n- `pop_2010` Population of each prefecture in 2010\n- `pop_density_km2_2010` Population density of each prefecture in $km^2$.\n- `geometry` The mapping information inside a special features. Here, each prefecture is a multipolygon. \n\n\nLet's begin by plotting the map as we did above, but filling in each sf multipolygon by population in 2010: \n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_prefs%>%\nggplot()+\n  geom_sf(aes(fill=pop_2010))+\n  theme_light()+\n  ggtitle(\"Prefecture Population, 2010\")+\n  labs(fill=\"Population (2010)\")\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\nHere are some options to customize the plot that you might be interested in: \n\n### Using RColorBrewer palette\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(RColorBrewer)\n#color options https://r-graph-gallery.com/38-rcolorbrewers-palettes.html\n\nmerged_prefs %>%\n  ggplot() +\n  geom_sf(aes(fill = pop_2010)) +\n  theme_light() +\n  ggtitle(\"Prefecture Population, 2010\") +\n  labs(fill=\"Population (2010)\") +\n  scale_fill_gradientn(colors = brewer.pal(8,\"Spectral\") ) #customize colors\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### Using part of a RColorBrewer palette\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_prefs %>%\n  ggplot() +\n  geom_sf(aes(fill = pop_2010)) +\n  theme_light() +\n  ggtitle(\"Prefecture Population, 2010\") +\n  labs(fill=\"Population (2010)\") +\n  scale_fill_gradientn(colors = brewer.pal(11,\"Spectral\")[5:11] ) #customize colors\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n\n### Building your own color palette using `scale_fill_gradientn`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_prefs %>%\n  ggplot() +\n  geom_sf(aes(fill = pop_2010)) +\n  theme_light() +\n  ggtitle(\"Prefecture Population, 2010\") +\n  labs(fill=\"Population (2010)\")+\n  scale_fill_gradientn(colors = c(\"yellow\",\"orange\",\"red\"))\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\nA note about customizing colors:\n\n- you should use a color scheme that is sequential (has order to it), when you are displaying continuous data\n- you should use a color scheme that is categorical, when your data is in categories and isn’t ordered\nyou should use a color scheme that is diverging, when want to put emphasis on two extremes and mid-range. For example, you might use a diverging palette from red to blue for political party affiliation in the US.\n- pay attention to your map being color blind friendly (`RdYlGr` is the worst…)\n- as a general rule, try not to use blue to represent a land mass (let’s reserve that for bodies of water)\n\n\n## Adding labels\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmerged_prefs %>%\n  ggplot() +\n  geom_sf(aes(fill = pop_2010)) +\n  theme_light() +\n  ggtitle(\"Prefecture Population, 2010\") +\n  labs(fill=\"Population (2010)\",x=\"\",y=\"\")+\n  scale_fill_gradientn(colors = brewer.pal(8, \"Spectral\") ) +  #customize colors\n  geom_sf_text(data = merged_prefs[merged_prefs$pop_2010 >7500000,], aes(label = pref_name), fontface=\"bold\")\n```\n\n::: {.cell-output-display}\n![](J_maps_choropleth_Notes_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n# `sf` cheatsheet\n\n[`sf` cheatsheet](https://github.com/rstudio/cheatsheets/blob/a045e18875cde4c9cf9c7f5f8bee71b4c8c2a2b7/sf.pdf)",
    "supporting": [
      "J_maps_choropleth_Notes_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}